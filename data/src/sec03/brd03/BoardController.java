package sec03.brd03;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FileUtils;

/*@WebServlet("/board/listArticle.do")
*/public class BoardController extends HttpServlet {
	private static String ARTICLE_IMAGE_REPO = "\\C:\\board\\article_image";
	BoardService boardService;
	ArticleVO articleVO;
	
	public void init(ServletConfig config) throws ServletException{
		boardService = new BoardService();
		articleVO = new ArticleVO();
	}
	
	public void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException{
		doHandle(request, response);
	}
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException{
		doHandle(request, response);
	}
	
	public void doHandle(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException{
		String nextPage ="";
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=utf-8");
		String action = request.getPathInfo();
		System.out.println("action:" + action);
		
		try {
			List<ArticleVO> articlesList = new ArrayList<ArticleVO>();
			if(action == null) {
				//action이 null이면
				articlesList = boardService.listArticles();
				//acriclesList 생성
				request.setAttribute("articlesList", articlesList);
				//acriclesList 에 acriclesList  값 저장
				nextPage = "/board02/listArticles.jsp";
				//board02/listArticles.jsp연결
			} else if (action.equals("/listArticles.do")) {
				//listArticles.do 일때
				articlesList = boardService.listArticles();
				request.setAttribute("articlesList",  articlesList);
				nextPage = "/board02/listArticles.jsp";
				//listArticles.jsp 연결 다음페이지
			} else if(action.equals("/articleForm.do")) {
				//action articleForm.do일떄
				nextPage ="/board02/articleForm.jsp";
				//board02/articleForm.jsp 연결
			} else if(action.equals("/addArticle.do")) {
				int articleNO=0;
				Map<String, String> articleMap = upload(request, response);
				String title = articleMap.get("title");
				String content = articleMap.get("content");
				String imageFileName = articleMap.get("imageFileName");
				articleVO.setParentNO(0);
				articleVO.setId("hong");
				articleVO.setTitle(title);
				articleVO.setContent(content);
				articleVO.setImageFileName(imageFileName);
				// 테이블에 새 글을 추가한 후 새 글에 대한 글 번호를 가져옵니다.
				articleNO= boardService.addArticle(articleVO);
				
				// 파일을 첨부한 경우에만 수행합니다.
				if(imageFileName !=null && imageFileName.length() !=0) {
					//temp 폴더에 임시로 업로드 된 파일 객체를 생성합니다.
					File srcFile = new File(ARTICLE_IMAGE_REPO +"\\"+"temp"+"\\"+imageFileName);
					//경로 하위에 글 번호로 폴더를 생성합니다.
					File destDir = new File(ARTICLE_IMAGE_REPO +"\\"+articleNO);
					destDir.mkdirs();
					//temp 폴더의 파일을 글 번호를 이름으로 하는 폴더로 이동시킵니다.
					FileUtils.moveFileToDirectory(srcFile, destDir, true);
				}

				PrintWriter pw = response.getWriter();
				pw.print("<script>" 
				         +"  alert('새글을 추가했습니다.');" 
						 +" location.href='"+request.getContextPath()+"/board/listArticles.do';"
				         +"</script>");
				//새 글 등록 메시지를 나타낸 후 자바스크립트 location 객체의 href 속성을 이용해 글 목록을 요청합니다.
				return;
			}

			RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
			dispatch.forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	private Map<String, String> upload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Map<String, String> articleMap = new HashMap<String, String>();
		//Map 생성
		String encoding = "utf-8";
		File currentDirPath = new File(ARTICLE_IMAGE_REPO);
		//파일소스, 파일 저장경로, 파일 최대 사이즈 필요
		DiskFileItemFactory factory = new DiskFileItemFactory();
		//DiskFileItemFactory을 통해 factory 인스턴스 만듬
		factory.setRepository(currentDirPath);
		//얻로드 받을 파일 경로
		factory.setSizeThreshold(1024 * 1024);
		//factory 사이즈 설정
		ServletFileUpload upload = new ServletFileUpload(factory);
		//upload 객체 생성
		try {
			List items = upload.parseRequest(request);
			//list items 생성
			for (int i = 0; i < items.size(); i++) {
				FileItem fileItem = (FileItem) items.get(i);
				//FIleItem fileItem에 값 저장
				if (fileItem.isFormField()) {
					//. FileItem이 폼 입력 항목인지 여부에 따라 알맞은 처리
					System.out.println(fileItem.getFieldName() + "=" 
				+ fileItem.getString(encoding));
					articleMap.put(fileItem.getFieldName(), fileItem.getString(encoding));
				} else {
					System.out.println("파라미터명:" + fileItem.getFieldName());
			//파일 명 출력
					System.out.println("파일크기:" + fileItem.getSize() + "bytes");
		//파일크기 출력
					if (fileItem.getSize() > 0) {
						int idx = fileItem.getName().lastIndexOf("\\");//윈도우기반
						if (idx == -1) {//유닉스, 리눅스 기반
							idx = fileItem.getName().lastIndexOf("/");
						}

						// 첨부한 파일을 먼저 temp 폴더에 업로드 합니다.
						String fileName = fileItem.getName().substring(idx + 1);
						//파일명 추출
						System.out.println("파일명:" + fileName);
						articleMap.put(fileItem.getFieldName(), fileName); 
						// 업로드 파일의 경로 제거 후 map에 파일명 저장
						File uploadFile = new File(currentDirPath + "\\temp\\" + fileName);
						fileItem.write(uploadFile);

					} // end if
				} // end if
			} // end for
		} catch (Exception e) {
			e.printStackTrace();
		}
		return articleMap;
	}
	
}